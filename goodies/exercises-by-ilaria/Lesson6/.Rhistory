# remove target
dplyr::select(-target) %>%
# make sure chr. variables are fct
mutate_if(is.character, as.factor) -> df.model
### NEW CHUNK
### It is a good practice to scale all predictors before running the model
df.model %>% mutate_if(is.double, scale) -> df.model
# Linear model
df.model %>%
lm(formula = mean.rt ~
diagnosis +
age +
AoO +
reading +
eng.use +
read.en
) -> m1
# Model selection with drop1()
drop1(m1, test = "Chisq") # all predictors significantly improve our model
# load libraries
library(tidyverse)
library(kableExtra)
library(unikn)
library(dlookr)
library(lme4)
library(lmerTest)
library(sjPlot)
# for all the chunks below, the setting "warning = F" is applied
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(echo = FALSE)
# theme set
theme_set(theme_unikn()) # set uni-konstanz theme for all plots
# create variable "table style" and apply kableExtra styling options (see https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)
table_style <- c("striped", "hover", "condensed", "responsive")
options(kable_styling_bootstrap_options = table_style)
read_csv("ort.know.en.csv") %>%
dplyr::select(ID:write_school,
# reorder
books_en, articles_en, comics_en, posts_en, subt_en, # read en
books_it, articles_it, comics_it, posts_it, subt_it,
trial_number:FREQcount,
-word_a, -word_b, -Word# read it
) %>%
rename(frequency = FREQcount)-> df
df %>%
group_by(diagnosis) %>%
summarize(
n = n_distinct(ID),
mean.age = round(mean(age),2),
sd.age = round(sd(age),2)) %>%
kable(col.names = c("DYS diagnosis", "N", "Age (M)", "(sd)"), caption = "N participant per group (DYS vs. TD), age (M and sd)") %>% kable_styling()
df %>%
group_by(class) %>%
summarize(
n = n_distinct(ID),
mean.age = round(mean(age),2),
sd.age = round(sd(age),2)) %>%
kable(col.names = c("High school level", "N", "Age (M)", "(sd)"), caption = "N participant per class, age (M and sd)") %>% kable_styling()
# EX 1: Create a kable summarizing EN age of acquisition (MEAN SD and RANGE) by group (diagnosis)
df %>%
group_by(diagnosis) %>%
summarize(
mean.aoo = round(mean(AoO),2),
sd.aoo = round(sd(AoO),2)
#range = range(AoO) # 3-8 / 4-6
) %>%
ungroup() %>%
mutate(range = if_else(
diagnosis == "NO", "3-8", "4-6"
)) %>%
kable(
col.names = c("DYS diagnosis", "AoO (M)", "sd", "range")
) %>% kable_styling()
df %>%
# reduce the df to a single row per participant
filter(target == "interesting") %>%
# create a smaller df with only proficiency variables
dplyr::select(ID, diagnosis, speaking, understanding, reading, writing) -> prof
prof %>% mutate(
# these variables should first be looked at as factors
speaking = as.factor(speaking),
understanding = as.factor(understanding),
reading = as.factor(reading),
writing = as.factor(writing)) %>%
diagnose_category(speaking, understanding, reading, writing) %>%
# select relevant cols
dplyr::select(variables, levels, ratio) %>%
kable() %>% kable_styling()
# create two smaller df (one per group) with only the questions:
# filter only dyslexics
prof %>% filter(diagnosis == "YES") %>%
# remove ID and diagnosis
dplyr::select(speaking:writing) -> prof.dys
# filter only TD
prof %>% filter(diagnosis == "NO") %>%
# remove ID and diagnosis
dplyr::select(speaking:writing) -> prof.td
# open ggarrange to make a grid
ggpubr::ggarrange(
# plot 1: DYS students
plot_likert(prof.dys,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6:Native-like (C2)"),
title = "DYS",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
# plot 2: TD students
plot_likert(prof.td,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6: Native-like (C2)"),
title = "TD",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
common.legend = T,
nrow = 2,
legend = "right"
)
# EX 2: Create a Likert plot summarizing how often participants claim they read in EN and IT
# Step 1: create smaller df with only the questions and make sure they are factors
df %>%
mutate(across(c(books_en:subt_it), ~case_when(
. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5
))) -> read # CORRECTION HERE - Instead of saving this to 'df', I saved it to 'read' and changed the two codes below to avoid errors with the following chunks.
read %>% select(books_en:subt_en) -> read.en
read %>% select(books_it:subt_it) -> read.it
# Step 2: open a ggarrange grid
ggpubr::ggarrange(
#PLOT 1
plot_likert(read.en,
catcount = 5,
legend.labels = c("1: Never", "2: Rarely", "3: Sometimes", "4: Often", "5: Alwats"),
title = "EN",
axis.labels = c("Books", "Articles", "Comics", "Posts", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F),
# PLOT2
plot_likert(read.it,
catcount = 5,
legend.labels = c("1: Never", "2: Rarely", "3: Sometimes", "4: Often", "5: Alwats"),
title = "IT",
axis.labels = c("Books", "Articles", "Comics", "Posts", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F),
nrow = 2,
common.legend = T
)
# first, we need to change the answers as numeric variables
df %>%
# with mutate(across(c())) we can select to what cols the following function is applied
mutate(across(c(books_en:subt_it),
# we need the symbol ~ before case_when, to signal that the formula is to be applied to all the functions
~ case_when(. == "Never" ~ 0,
. == "Rarely" ~ 1,
. == "Sometimes" ~ 2,
. == "Often" ~ 3,
. == "Always" ~ 4))) -> df
# now we need to create a composite measure of reading exposure in EN (read.en)
df %>%
# use rowwise() to make sure computations are made row-wise
rowwise() %>%
# now we create a composite measire of reading exp by calculating the mean of participants answer for each question
mutate(read.en = mean(c_across(books_en:subt_en), na.rm = T) # na.rm ignores NA
) %>%
# always ungroup!
ungroup() -> df
# EX 3: Create a composite score of eng.use by computing the mean of all answers above, excluding english_hours_week
df %>%
rowwise() %>%
mutate(
eng.use = mean(c_across(speak_daily:write_school), na.rm = T)
) %>%
ungroup() -> df
# Accuracy scores
df %>%
mutate(accuracy = if_else(target == response, 1, 0)) %>%
# sum all participants' correct answers
group_by(ID) %>%
mutate(accuracy_tot = sum(accuracy)) %>%
ungroup() -> df
# RT scores
df %>%
# we want to create a mean rt score for each participant
group_by(ID) %>%
# with [accuracy ==1] we are saying to compute the mean of rt only for correct trials
mutate(mean.rt = mean(reaction_time[accuracy == 1])) %>%
ungroup() -> df
df %>% ggplot(aes(x = reaction_time)) + geom_density(alpha = .5, fill = "deepskyblue4")
df %>% mutate(reaction_time_log = log(reaction_time)) -> df
df %>% mutate(reaction_time_z = scale(reaction_time)) -> df
df %>% ggplot(aes(x = reaction_time_log)) + geom_density(alpha = .5, fill = "deepskyblue4")
df %>% ggplot(aes(x = reaction_time_z)) + geom_density(alpha = .5, fill = "deepskyblue4")
# prepare df for analysis
df %>%
dplyr::select(ID, diagnosis, class, age,
AoO,
reading, read.en,
eng.use,
target,
accuracy_tot, mean.rt) %>%
# reduce df to 1 row per participant
filter(target == "interesting") %>%
# remove target
dplyr::select(-target) %>%
# make sure chr. variables are fct
mutate_if(is.character, as.factor) -> df.model
# prepare df for analysis
df %>%
dplyr::select(ID, diagnosis, class, age,
AoO,
reading, read.en,
eng.use,
target,
accuracy_tot, mean.rt) %>%
# reduce df to 1 row per participant
filter(target == "interesting") %>%
# remove target
dplyr::select(-target) %>%
# make sure chr. variables are fct
mutate_if(is.character, as.factor) -> df.model
# Linear model
df.model %>%
lm(formula = mean.rt ~
diagnosis +
age +
AoO +
reading +
eng.use +
read.en
) -> m1
# Model selection with drop1()
drop1(m1, test = "Chisq") # all predictors significantly improve our model
# Visualize model output
ggpubr::ggarrange(
plot_model(m1, type = "pred", terms = c("age", "diagnosis")),
plot_model(m1, type = "pred", terms = c("AoO", "diagnosis")),
plot_model(m1, type = "pred", terms = c("reading", "diagnosis")),
plot_model(m1, type = "pred", terms = c("eng.use", "diagnosis")),
plot_model(m1, type = "pred", terms = c("read.en", "diagnosis")),
common.legend = T)
# Model output
# tab_model()
tab_model(m1)
summary(m1)
# Visualize model output (only significant predictors)
plot_model(m1, type = "pred", terms = c("age", "diagnosis"))
# Linear model
df %>%
lm(formula = accuracy_tot ~
age +
AoO +
reading +
diagnosis +
eng.use +
read.en
) -> m2
# Model selection with drop1()
drop1(m2, test = "Chisq")
summary(m2)
# Visualize model
plot_model(m2, type = "pred", terms = c("reading"))
# Visualize model
plot_model(m2, type = "pred", terms = c("age"))
plot_model(m2, type = "pred", terms = c("reading", "diagnosis"))
# Visualize model
ggpubr::ggarrange(
plot_model(m2, type = "pred", terms = c("age", "diagnosis")),
plot_model(m2, type = "pred", terms = c("AoO", "diagnosis")),
plot_model(m2, type = "pred", terms = c("reading", "diagnosis")),
plot_model(m2, type = "pred", terms = c("eng.use", "diagnosis")),
plot_model(m2, type = "pred", terms = c("read.en", "diagnosis")),
common.legend = T
)
# Visualize model
ggpubr::ggarrange(
plot_model(m2, type = "pred", terms = c("age", "diagnosis")) + ggtitle(" "),
plot_model(m2, type = "pred", terms = c("AoO", "diagnosis")) + ggtitle(" "),
plot_model(m2, type = "pred", terms = c("reading", "diagnosis")) + ggtitle(" "),
plot_model(m2, type = "pred", terms = c("eng.use", "diagnosis")) + ggtitle(" "),
plot_model(m2, type = "pred", terms = c("read.en", "diagnosis")) + ggtitle(" "),
common.legend = T
)
# Model selection with drop1()
drop1(m1, test = "Chisq") # all predictors significantly improve our model
summary(m1)
# Linear model
df %>%
lm(formula = mean.rt ~
diagnosis +
age +
AoO +
reading +
eng.use +
read.en
) -> m1
# load libraries
library(tidyverse)
library(kableExtra)
library(unikn)
library(dlookr)
library(lme4)
library(lmerTest)
library(sjPlot)
# for all the chunks below, the setting "warning = F" is applied
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(echo = FALSE)
# theme set
theme_set(theme_unikn()) # set uni-konstanz theme for all plots
# create variable "table style" and apply kableExtra styling options (see https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)
table_style <- c("striped", "hover", "condensed", "responsive")
options(kable_styling_bootstrap_options = table_style)
read_csv("ort.know.en.csv") %>%
dplyr::select(ID:write_school,
# reorder
books_en, articles_en, comics_en, posts_en, subt_en, # read en
books_it, articles_it, comics_it, posts_it, subt_it,
trial_number:FREQcount,
-word_a, -word_b, -Word# read it
) %>%
rename(frequency = FREQcount)-> df
df %>%
group_by(diagnosis) %>%
summarize(
n = n_distinct(ID),
mean.age = round(mean(age),2),
sd.age = round(sd(age),2)) %>%
kable(col.names = c("DYS diagnosis", "N", "Age (M)", "(sd)"), caption = "N participant per group (DYS vs. TD), age (M and sd)") %>% kable_styling()
df %>%
group_by(class) %>%
summarize(
n = n_distinct(ID),
mean.age = round(mean(age),2),
sd.age = round(sd(age),2)) %>%
kable(col.names = c("High school level", "N", "Age (M)", "(sd)"), caption = "N participant per class, age (M and sd)") %>% kable_styling()
# EX 1: Create a kable summarizing EN age of acquisition (MEAN SD and RANGE) by group (diagnosis)
df %>%
group_by(diagnosis) %>%
summarize(
mean.aoo = round(mean(AoO),2),
sd.aoo = round(sd(AoO),2)
#range = range(AoO) # 3-8 / 4-6
) %>%
ungroup() %>%
mutate(range = if_else(
diagnosis == "NO", "3-8", "4-6"
)) %>%
kable(
col.names = c("DYS diagnosis", "AoO (M)", "sd", "range")
) %>% kable_styling()
df %>%
# reduce the df to a single row per participant
filter(target == "interesting") %>%
# create a smaller df with only proficiency variables
dplyr::select(ID, diagnosis, speaking, understanding, reading, writing) -> prof
prof %>% mutate(
# these variables should first be looked at as factors
speaking = as.factor(speaking),
understanding = as.factor(understanding),
reading = as.factor(reading),
writing = as.factor(writing)) %>%
diagnose_category(speaking, understanding, reading, writing) %>%
# select relevant cols
dplyr::select(variables, levels, ratio) %>%
kable() %>% kable_styling()
# create two smaller df (one per group) with only the questions:
# filter only dyslexics
prof %>% filter(diagnosis == "YES") %>%
# remove ID and diagnosis
dplyr::select(speaking:writing) -> prof.dys
# filter only TD
prof %>% filter(diagnosis == "NO") %>%
# remove ID and diagnosis
dplyr::select(speaking:writing) -> prof.td
# open ggarrange to make a grid
ggpubr::ggarrange(
# plot 1: DYS students
plot_likert(prof.dys,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6:Native-like (C2)"),
title = "DYS",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
# plot 2: TD students
plot_likert(prof.td,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6: Native-like (C2)"),
title = "TD",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
common.legend = T,
nrow = 2,
legend = "right"
)
# EX 2: Create a Likert plot summarizing how often participants claim they read in EN and IT
# Step 1: create smaller df with only the questions and make sure they are factors
df %>%
mutate(across(c(books_en:subt_it), ~case_when(
. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5
))) -> read # CORRECTION HERE - Instead of saving this to 'df', I saved it to 'read' and changed the two codes below to avoid errors with the following chunks.
read %>% select(books_en:subt_en) -> read.en
read %>% select(books_it:subt_it) -> read.it
# Step 2: open a ggarrange grid
ggpubr::ggarrange(
#PLOT 1
plot_likert(read.en,
catcount = 5,
legend.labels = c("1: Never", "2: Rarely", "3: Sometimes", "4: Often", "5: Alwats"),
title = "EN",
axis.labels = c("Books", "Articles", "Comics", "Posts", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F),
# PLOT2
plot_likert(read.it,
catcount = 5,
legend.labels = c("1: Never", "2: Rarely", "3: Sometimes", "4: Often", "5: Alwats"),
title = "IT",
axis.labels = c("Books", "Articles", "Comics", "Posts", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F),
nrow = 2,
common.legend = T
)
# first, we need to change the answers as numeric variables
df %>%
# with mutate(across(c())) we can select to what cols the following function is applied
mutate(across(c(books_en:subt_it),
# we need the symbol ~ before case_when, to signal that the formula is to be applied to all the functions
~ case_when(. == "Never" ~ 0,
. == "Rarely" ~ 1,
. == "Sometimes" ~ 2,
. == "Often" ~ 3,
. == "Always" ~ 4))) -> df
# now we need to create a composite measure of reading exposure in EN (read.en)
df %>%
# use rowwise() to make sure computations are made row-wise
rowwise() %>%
# now we create a composite measire of reading exp by calculating the mean of participants answer for each question
mutate(read.en = mean(c_across(books_en:subt_en), na.rm = T) # na.rm ignores NA
) %>%
# always ungroup!
ungroup() -> df
# EX 3: Create a composite score of eng.use by computing the mean of all answers above, excluding english_hours_week
df %>%
rowwise() %>%
mutate(
eng.use = mean(c_across(speak_daily:write_school), na.rm = T)
) %>%
ungroup() -> df
# Accuracy scores
df %>%
mutate(accuracy = if_else(target == response, 1, 0)) %>%
# sum all participants' correct answers
group_by(ID) %>%
mutate(accuracy_tot = sum(accuracy)) %>%
ungroup() -> df
# RT scores
df %>%
# we want to create a mean rt score for each participant
group_by(ID) %>%
# with [accuracy ==1] we are saying to compute the mean of rt only for correct trials
mutate(mean.rt = mean(reaction_time[accuracy == 1])) %>%
ungroup() -> df
df %>% ggplot(aes(x = reaction_time)) + geom_density(alpha = .5, fill = "deepskyblue4")
df %>% mutate(reaction_time_log = log(reaction_time)) -> df
df %>% mutate(reaction_time_z = scale(reaction_time)) -> df
df %>% ggplot(aes(x = reaction_time_log)) + geom_density(alpha = .5, fill = "deepskyblue4")
df %>% ggplot(aes(x = reaction_time_z)) + geom_density(alpha = .5, fill = "deepskyblue4")
# Linear model
df %>%
lm(formula = mean.rt ~
diagnosis +
age +
AoO +
reading +
eng.use +
read.en
) -> m1
# Model selection with drop1()
drop1(m1, test = "Chisq") # all predictors significantly improve our model
summary(m1)
# Visualize model output (only significant predictors)
plot_model(m1, type = "pred", terms = c("age", "diagnosis"))
# Visualize model output (only significant predictors)
ggpubr::ggarrange(
plot_model(m1, type = "pred", terms = c("age", "diagnosis")) + ggtitle(" "),
plot_model(m1, type = "pred", terms = c("AoO", "diagnosis")) + ggtitle(" "),
plot_model(m1, type = "pred", terms = c("reading", "diagnosis")) + ggtitle(" "),
plot_model(m1, type = "pred", terms = c("eng.use", "diagnosis")) + ggtitle(" "),
plot_model(m1, type = "pred", terms = c("read.en", "diagnosis")) + ggtitle(" "),
common.legend = T
)
