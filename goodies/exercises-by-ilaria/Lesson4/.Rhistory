mutate(
place_birth = if_else(
place_birth == "Puglia, Scorrano" |
place_birth == "Calabria, Catanzaro",
"South", "North"
)) %>%
mutate(
place_primary_school = if_else(
place_primary_school == "Calabria, Marina di Gioiosa Ionica",
"South (Calabria)",
"North (Lombardy)"
)) %>%
mutate(
place_lower_secondary_school = if_else(
place_lower_secondary_school == "Calabria, Marina di Gioiosa Ionica",
"South (Calabria)",
"North (Lombardy)"
)
) %>%
diagnose_category(place_birth,
place_primary_school,
place_lower_secondary_school) %>%
dplyr::select(variables, levels, freq, ratio) %>%
mutate(ratio = round(ratio,2),
variables = case_when(
variables == "place_birth" ~ "Place of birth",
variables == "place_primary_school" ~ "Region primary school (6 - 10/11 years old)",
variables == "place_lower_secondary_school" ~ "Region middle school (11 - 13/14 years old)"
)) %>%
rename(origin = levels,
N = freq,
"%" = ratio,
" " = variables) %>%
kable(caption = "Participants' place of birth and lower education") %>% kable_styling()
# save_kable(t2, "t2.pdf")
df %>%
mutate(
L1 = tolower(L1),
L2 = tolower(L2)
) -> df
df %>%
mutate(
L1 = case_when(
L1 %in% c("italian", "italiano") ~ "IT",
L1 == "italian, polish (hs)" ~ "IT + POL (HS)",
L1 == "italian / french (hs)" ~ "IT + FR (HS)",
L1 == "italian and romanian" ~ "IT + RO (HS)"
),
L2 = case_when(
L2 == "english" ~ "EN",
L2 == "inglese" ~ "EN",
L2 == "romanian" ~ "EN" # the student specified that English was the first FL learned - Romanian is their 2L1
))-> df
df %>%
diagnose_category(L1,
L2) %>%
dplyr::select(variables, levels, freq, ratio) %>%
mutate(ratio = round(ratio,2)) %>%
rename(languages = levels,
N = freq,
"%" = ratio,
" " = variables) %>%
kable(caption = "Participants' L1 & L2") %>% kable_styling()
# save_kable(t3, "t3.pdf")
df %>%
mutate(lang_home = if_else(lang_home == "No", "No, I don't", "Yes, I speak other languages at home")) %>%
diagnose_category(lang_home, lang_home_answer) %>%
dplyr::select(levels, freq, ratio) %>%
mutate(ratio = round(ratio,2)) %>%
rename(Lang = levels,
N = freq,
"%" = ratio) %>%
kable(caption = "Do you speak other languages with your family?") %>% kable_styling()
# NOTE: No answers were mistakes
# save_kable(t4, "t4.pdf")
df %>% mutate(lang_friends_answer = tolower(lang_friends_answer)) -> df
df %>%
mutate(lang_friends = if_else(lang_friends == "No", "No, I don't", "Yes, I speak other languages with my friends"),
lang_friends_answer = case_when(
lang_friends_answer == "(english)" | lang_friends_answer == "english" | lang_friends_answer == "inglese" ~ "EN",
lang_friends_answer == "english / french" | lang_friends_answer == "english and french" ~ "EN and FR",
lang_friends_answer == "french,arabic" ~ "FR and AR",
lang_friends_answer == "spanish and english" ~ "EN and SP"
)) %>%
diagnose_category(lang_friends, lang_friends_answer) %>%
dplyr::select(levels, freq, ratio) %>%
mutate(ratio = round(ratio,2)) %>%
rename(Lang = levels,
N = freq,
"%" = ratio) %>%
kable(caption = "Do you speak other languages with your friends?") %>% kable_styling()
# save_kable(t5, "t5.pdf")
df %>%
diagnose_category(type_acquisition) %>%
dplyr::select(levels, freq, ratio) %>%
mutate(ratio = round(ratio,2)) %>%
rename(" " = levels,
N = freq,
"%" = ratio) %>%
kable(caption = "Where did you start learning English? Note: participants' who responded home claimed their parents used English with them") %>% kable_styling()
# age of acquisition
df %>% diagnose_numeric(ao_o) %>%
dplyr::select(variables, min, max, mean, median) %>%
mutate(variables = if_else(variables == "ao_o", "AoO","no")) %>%
rename(" " = variables) %>%
kable(caption = "Age of acquisition") %>% kable_styling()
df %>% ggplot(aes(x = ao_o, fill = "indianred3")) + geom_density(alpha = .5) + theme(legend.position = "none") + xlab("AoO") + geom_vline(xintercept = mean(df$ao_o),  col = "steelblue", linetype = "dashed")
# experiences abroad
df %>%
mutate(abroad = tolower(abroad),
abroad_answer = tolower(abroad_answer)) -> df
df %>% diagnose_category(abroad) %>%
dplyr::select(levels, freq, ratio) %>%
mutate(ratio = round(ratio,2)) %>%
rename(" " = levels,
N = freq,
"%" = ratio) %>%
kable(caption = "Experiences abroad") %>% kable_styling()
# weekly hours
df %>% diagnose_numeric(english_hours_week) %>%
dplyr::select(min, max, mean, median) %>%
kable(caption = "EN classes per week") %>% kable_styling()
df %>% ggplot(aes(x = english_hours_week, fill = "indianred3")) + geom_density(alpha = .5) + theme(legend.position = "none") + xlab("EN weekly hours") + geom_vline(xintercept = mean(df$english_hours_week),  col = "steelblue", linetype = "dashed")
# extra classes
df %>% diagnose_category(extra_classes) %>%
dplyr::select(levels, freq, ratio) %>%
mutate(ratio = round(ratio,2)) %>%
rename(" " = levels,
N = freq,
"%" = ratio) %>%
kable(caption = "Extra EN classes") %>% kable_styling()
comma_to_dot <- function(x) {
x <- gsub(",", ".", x)
as.numeric(x)
}
# Mutate all four columns using the comma_to_dot function
df %>%
mutate(age = comma_to_dot(age)) -> df
# summary of weekly hours of english
# sd(df$english_hours_week)
df %>% mutate(other_languages = tolower(other_languages)) -> df
# separate rows by each language
df %>%
dplyr::select(ID, other_languages) -> other.lang
other.lang %>%
separate_rows(other_languages, sep = ",\\s*|\\s+and\\s+") %>%
mutate(other_languages = str_trim(other_languages)) %>%
mutate(value = 1) -> other.lang
# pivot wider to create new columns for each language
other.lang %>%
pivot_wider(names_from = other_languages, values_from = value, values_fill = 0) -> other.lang
other.lang %>% janitor::clean_names() -> other.lang
other.lang %>%
mutate(
# French
FR = if_else(
french == 1 | francese == 1 | english_french_german == 1 | english_french_spanish_german == 1 | inglese_francese_tedesco == 1 | inglese_tedesco_francese_spagnolo == 1 | italian_english_french_german == 1 | francese_e_tedesco == 1, 1, 0
),
# German
GR = if_else(
german == 1 | english_french_german == 1 | english_french_spanish_german == 1 | inglese_francese_tedesco == 1 | inglese_tedesco_francese_spagnolo == 1 | inglese_tedesco_francese_spagnolo == 1 | tedesco == 1 | italian_english_french_german == 1 | francese_e_tedesco == 1, 1, 0
),
# Spanish
SP = if_else(
spanish == 1 | english_french_spanish_german == 1 | inglese_tedesco_francese_spagnolo == 1 | inglese_spagnolo == 1 | spagnolo == 1, 1, 0
),
# Other
SWE = if_else(swedish == 1, 1, 0),
CHI = if_else(chinese == 1, 1, 0),
ARA = if_else(arabic == 1, 1, 0),
ROM = if_else(romanian == 1, 1, 0),
SWE = if_else(swedish == 1, 1, 0),
KOR = if_else(korean == 1, 1, 0),
POL = if_else(polish == 1, 1, 0)) %>%
dplyr::select(id, FR:POL) -> other.lang
other.lang %>% dplyr::select(-id) %>%
diagnose_numeric()  %>%
dplyr::select(variables, mean) %>%
rename(Languages = variables) %>%
mutate(mean = round(mean,2)) %>%
kable() %>% kable_styling()
# from here: exclude participants based on reading performance
df %>%
filter(ID != "LAE23" &
ID != "LAE30" &
ID != "LAE36" &
ID != "LAE38" &
ID != "LC19") -> df
df %>% dplyr::select(speaking:writing) %>%  mutate_all(as.factor) -> eng.prof
plot_likert(eng.prof,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6: Native-like (C2)"),
title = "English: self-assessed proficiency ",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F, geom.size = .3)  + theme(aspect.ratio = 0.5/1) -> p1
p1
# plots comparing td and dys
df %>% filter(diagnosis == "YES") %>% dplyr::select(speaking:writing) %>% mutate_all(as.factor)  -> eng.prof.dys
df %>% filter(diagnosis == "NO") %>% dplyr::select(speaking:writing) %>% mutate_all(as.factor) -> eng.prof.td
ggarrange(
plot_likert(eng.prof.dys,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6: Native-like (C2)"),
title = "DYS",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
plot_likert(eng.prof.td,
catcount = 6,
legend.labels = c("1: Very basic (A1)", "2 (A2)", "3 (B1)", "4 (B2)", "5 (C1)", "6: Native-like (C2)"),
title = "TD",
axis.labels = c("Speaking", "Understanding", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
common.legend = T,
legend = "right",
ncol = 1,
nrow = 2
) -> p2
p2
df %>% dplyr::select(speak_daily:write_daily) %>% mutate_all(as.factor) -> eng.use.daily
df %>% dplyr::select(speak_school:write_school) %>% mutate_all(as.factor) -> eng.use.school
ggarrange(
plot_likert(eng.use.daily,
catcount = 5,
legend.labels = c("Only IT", "EN .25% of the time", "EN 50% of the time", "EN 75% of the time", "Always EN"),
title = "English use outside school",
axis.labels = c("Speaking", "Listening", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F),
plot_likert(eng.use.school,
catcount = 5,
legend.labels = c("Only IT", "EN .25% of the time", "EN 50% of the time", "EN 75% of the time", "Always EN"),
title = "English use at school",
axis.labels = c("Speaking", "Listening", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F),
common.legend = T,
nrow = 2,
legend = "right") -> p3
p3
# compare td and dys daily
df %>% filter(diagnosis == "YES") %>% dplyr::select(speak_daily:write_daily) %>% mutate_all(as.factor) -> eng.use.daily.dys
df %>% filter(diagnosis == "NO") %>% dplyr::select(speak_daily:write_daily) %>% mutate_all(as.factor) -> eng.use.daily.td
ggarrange(
plot_likert(eng.use.daily.dys,
catcount = 5,
legend.labels = c("Only IT", "EN .25% of the time", "EN 50% of the time", "EN 75% of the time", "Always EN"),
title = "DYS",
axis.labels = c("Speaking", "Listening", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
plot_likert(eng.use.daily.td,
catcount = 5,
legend.labels = c("Only IT", "EN .25% of the time", "EN 50% of the time", "EN 75% of the time", "Always EN"),
title = "TD",
axis.labels = c("Speaking", "Listening", "Reading", "Writing"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T),
common.legend = T,
legend = "right",
ncol = 1,
nrow = 2
) -> p4
p4
# create data
df %>%
dplyr::select(books_en, articles_en, comics_en, posts_en, subt_en) %>%
mutate_all(as.factor)-> read.en
df %>%
dplyr::select(books_it, articles_it, comics_it, posts_it, subt_it) %>%
mutate_all(as.factor)-> read.it
# change factors into numerical variables
read.en %>%
mutate_all( ~ case_when(. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5)) %>%
mutate_if(is.double, as.factor)-> read.en
read.it %>%
mutate_all( ~ case_when(. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5)) %>%
mutate_if(is.double, as.factor) -> read.it
ggarrange(
plot_likert(read.en,
catcount = 5,
legend.labels = c("Never", "Rarely", "Sometimes", "Often", "Always"),
title = "Reading exposure EN",
axis.labels = c("Books", "Articles", "Comics", "Posts (social media)", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F) + theme(aspect.ratio = 0.5/1),
plot_likert(read.it,
catcount = 5,
legend.labels = c("Never", "Rarely", "Sometimes", "Often", "Always"),
title = "Reading exposure IT",
axis.labels = c("Books", "Articles", "Comics", "Posts (social media)", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = F) + theme(aspect.ratio = 1/2),
common.legend = T,
nrow = 2,
legend = "right"
) -> p5
p5
# comparing dys and td Italian reading
# create data
# EN reading: DYS
df %>%
filter(diagnosis == "YES") %>%
dplyr::select(books_en, articles_en, comics_en, posts_en, subt_en) %>%
mutate_all(as.factor) %>%
mutate_all( ~ case_when(. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5)) %>%
mutate_if(is.double, as.factor) -> read.en.dys
# IT reading: DYS
df %>%
filter(diagnosis == "YES") %>%
dplyr::select(books_it, articles_it, comics_it, posts_it, subt_it) %>%
mutate_all(as.factor) %>%
mutate_all( ~ case_when(. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5)) %>%
mutate_if(is.double, as.factor) -> read.it.dys
# EN reading: TD
df %>%
filter(diagnosis == "NO") %>%
dplyr::select(books_en, articles_en, comics_en, posts_en, subt_en) %>%
mutate_all(as.factor) %>%
mutate_all( ~ case_when(. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5)) %>%
mutate_if(is.double, as.factor) -> read.en.td
# IT reading: TD
df %>%
filter(diagnosis == "NO") %>%
dplyr::select(books_it, articles_it, comics_it, posts_it, subt_it) %>%
mutate_all(as.factor) %>%
mutate_all( ~ case_when(. == "Never" ~ 1,
. == "Rarely" ~ 2,
. == "Sometimes" ~ 3,
. == "Often" ~ 4,
. == "Always" ~ 5)) %>%
mutate_if(is.double, as.factor) -> read.it.td
# plot EN reading TD vs. DYS
ggarrange(
plot_likert(read.en.td,
catcount = 5,
# catneutral = ,
legend.labels = c("Never", "Rarely", "Sometimes", "Often", "Always"),
title = "Reading exposure EN: TD",
axis.labels = c("Books", "Articles", "Comics", "Posts (social media)", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T) + theme(aspect.ratio = 0.5/1),
plot_likert(read.en.dys,
catcount = 5,
# cat.neutral = ,
legend.labels = c("Never", "Rarely", "Sometimes", "Often", "Always"),
title = "Reading exposure EN: DYS",
axis.labels = c("Books", "Articles", "Comics", "Posts (social media)", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T) + theme(aspect.ratio = 1/2),
common.legend = T,
nrow = 2,
legend = "right"
) -> p6
p6
# Plot IT reading: TD vs. DYS
ggarrange(
plot_likert(read.it.td,
catcount = 5,
# catneutral = ,
legend.labels = c("Never", "Rarely", "Sometimes", "Often", "Always"),
title = "Reading exposure IT: TD",
axis.labels = c("Books", "Articles", "Comics", "Posts (social media)", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T) + theme(aspect.ratio = 0.5/1),
plot_likert(read.it.dys,
catcount = 5,
# cat.neutral = ,
legend.labels = c("Never", "Rarely", "Sometimes", "Often", "Always"),
title = "Reading exposure IT: DYS",
axis.labels = c("Books", "Articles", "Comics", "Posts (social media)", "Subtitles"),
geom.colors = "RdBu",
# values = "sum.inside",
reverse.scale = T, show.n = T) + theme(aspect.ratio = 1/2),
common.legend = T,
nrow = 2,
legend = "right"
) -> p7
p7
# Data manipulation:
# Function to replace commas with dots and convert to numeric
comma_to_dot <- function(x) {
x <- gsub(",", ".", x)
as.numeric(x)
}
# Mutate all four columns using the comma_to_dot function
df %>%
mutate(across(c(speak_daily:write_school), comma_to_dot)) -> df
# USE from factor to numeric:  never == 0 (above never == 1 just for the purpose of creating a likert plot)
df %>%
mutate(across(c(books_en:subt_it),
~ case_when(
. == "Never" ~ 0,
. == "Rarely" ~ 1,
. == "Sometimes" ~ 2,
. == "Often" ~ 3,
. == "Always" ~ 4,
TRUE ~ as.numeric(.)
))) -> df
# Create composite variables
df %>%
# select relevant cols and order data frame
dplyr::select(ID:class, english_hours_week, speak_daily:write_school, books_en, articles_en, comics_en, posts_en, subt_en, books_it, articles_it, comics_it, posts_it, subt_it, speaking:writing)  %>%
rowwise() %>%
mutate(
# english proficiency
eng.prof = mean(c_across(speaking:writing), na.rm = T),
# reading exposure EN
eng.read = mean(c_across(books_en:subt_en), na.rm = T),
# reading exposure IT
it.read = mean(c_across(books_it:subt_it), na.rm = T),
# use of english
eng.use = mean(c_across(english_hours_week:write_school), na.rm = T)
) %>%
ungroup() %>%
# select only composite measures
dplyr::select(ID:class, eng.prof:eng.use) -> df1
ggarrange(
df1 %>%
mutate(eng.prof = scale(eng.prof)) %>%
ggplot(aes(x = eng.prof, fill = diagnosis)) + geom_density(alpha = 0.5),
df1 %>%
mutate(eng.use = scale(eng.use)) %>%
ggplot(aes(x = eng.use, fill = diagnosis)) + geom_density(alpha = 0.5),
df1 %>%
mutate(eng.read = scale(eng.read)) %>%
ggplot(aes(x = eng.read, fill = diagnosis)) + geom_density(alpha = 0.5),
df1 %>%
mutate(it.read = scale(it.read)) %>%
ggplot(aes(x = it.read, fill = diagnosis)) + geom_density(alpha = 0.5),
common.legend = T) -> p8
p8
# round(mean(df1$it.read),2)
lm(eng.prof ~ diagnosis, data = df1) -> m1 # p = 0.005
lm(eng.read ~ diagnosis, data = df1) -> m2
lm(eng.use ~ diagnosis, data = df1) -> m3
lm(it.read ~ diagnosis, data = df1) -> m4
# Anova(m4, type = "III")
tab_model(m1,m2,m3,m4)
df1
tab_model(m1,m2,m3,m4)
# save plots
ggsave("p1.pdf", p1)
ggsave("p2.pdf", p2)
ggsave("p3.pdf", p3)
ggsave("p4.pdf", p4)
ggsave("p5.pdf", p5)
ggsave("p6.pdf", p6)
ggsave("p7.pdf", p7)
ggsave("p8.pdf", p8)
# save df1
write_csv(df1, "quest.measures.csv")
# model tests:
drop1(m1, test = "Chisq")
lm(eng.prof ~ diagnosis + class, data = df1) -> m1
# model tests:
drop1(m1, test = "Chisq")
lm(eng.read ~ diagnosis + class, data = df1) -> m2
tab_model(m1,m2,m3,m4)
# model tests:
drop1(m2, test = "Chisq")
lm(eng.prof ~ diagnosis + class, data = df1) -> m1
lm(eng.read ~ diagnosis + class, data = df1) -> m2
lm(eng.use ~ diagnosis + class, data = df1) -> m3
lm(it.read ~ diagnosis + class, data = df1) -> m4
tab_model(m1,m2,m3,m4)
# save plots
ggsave("p1.pdf", p1)
ggsave("p2.pdf", p2)
ggsave("p3.pdf", p3)
ggsave("p4.pdf", p4)
ggsave("p5.pdf", p5)
ggsave("p6.pdf", p6)
ggsave("p7.pdf", p7)
ggsave("p8.pdf", p8)
# save df1
write_csv(df1, "quest.measures.csv")
p1
